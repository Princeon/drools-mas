/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
  Content Based routing general rules
  When a message arrives, CBR rules determine its destination (the session(s) where it needs to be processed),
  while processing rules determine the commands to be executed to deliver the contents to that session.
  When the two steps have been completed, the commands are delivered.
*/

package org.drools.mas;

import org.drools.mas.core.SessionManager;
import org.drools.runtime.StatefulKnowledgeSession;
import java.util.Map;
import org.drools.mas.util.LoggerHelper;
import org.drools.mas.core.DroolsAgentConfiguration;
import org.drools.mas.core.SessionManagerFactory;
import org.drools.mas.util.helper.SessionLocator;
import org.drools.mas.util.helper.NodeLocator;
import org.drools.mas.util.helper.NoHandlerFault;


query mapSession( String $key, String $sid )
    SessionMapping( $key, $sid; )
end

rule "log"
when
    $s: SessionMapping()
then
    LoggerHelper.debug( "  !#!@#!@#!@#!@####  Session Mapping: " + $s );
end


rule "Trigger Mapping"
when
    $ml : MappingLookup( $mid, $key; )
    ?mapSession( $key, $target; )
then
    LoggerHelper.debug(" ### Agent CBR: Resolved routing destination for message " + $mid + " to session " + $target );
end

/**
Is this rule being used? Nobody is never inserting a MappingLookup.
CBR rules usually insert Destination directly.
**/
rule "Resolve Mapping"
when
    $ml : MappingLookup( $mid, $key; )
    SessionMapping( $key, $target; )
then
    LoggerHelper.debug(" ### Agent CBR: Resolved routing destination for message " + $mid + " to session " + $target );

    retract( $ml );
    insert( new Destination( $mid, $target ) );
end

rule "Implicit nodes"
when
    SessionLocator( $isMind : mind, $nid : nodeId )
    not NodeLocator( mindNode == $isMind, nodeId == $nid )
then
    insert( new NodeLocator( $nid, $isMind ) );
end


query subLocation( String $target )
    NodeLocator( mindNode == false, $target := nodeId )
end

rule "Generate Session"
salience 9999
when
    $qry : DroolsQuery(  name == "mapSession", $el : elements[0] )
    $key : String( this != "" ) from $el
    not SessionMapping( $key ;  )
    $conf: DroolsAgentConfiguration()
    $sessionLocator: SessionLocator( mind == true )
    ?subLocation( $target ; )
then
    String sid = $key;
    String targetLocation = $target; // $conf.getMindNodeLocation(); //apply load balancing policy here

    /**
    * Get the deault sub-session descriptor, clone it and override its sessionId
    * and nodeId properties.
    **/
    DroolsAgentConfiguration.SubSessionDescriptor dsd = $conf.getDefaultSubsessionDescriptor();
    if (dsd == null){
        if( LoggerHelper.isErrorEnabled() ){
            LoggerHelper.error("  #### Generating Session: DroolsAgentConfiguration (" + $conf + ") doesn't specify any default sub-session descriptor to use!");
        }
        throw new IllegalStateException("Unable to dynamically create a sub-session: DroolsAgentConfiguration (" + $conf + ") doesn't specify any default sub-session descriptor to use!");
    }
    dsd = dsd.makeClone();
    dsd.setSessionId(sid);
    dsd.setNodeId(targetLocation);
    if( LoggerHelper.isDebugEnabled() ){
        LoggerHelper.debug("  !#!@#!@#!@#!@#### Generating Session: '" + sid + "' with conf: "+ dsd );
    }

    StatefulKnowledgeSession kSession =
        SessionManagerFactory.create( sid,
                               $conf,
                               dsd ).getStatefulKnowledgeSession();
    kSession.insert( new SessionLocator( targetLocation, sid , false, true) );
    kSession.insert( $sessionLocator );
    kSession.fireAllRules();

    SessionMapping sm = new SessionMapping( $key, sid ) ;
    insert( sm );

    insert( new SessionLocator( targetLocation, sid , false, true) );
end



rule "No session of this kind of message"
    salience -10000
    when
        $s: SessionLocator($sessionId: sessionId, mind == true)
        ACLMessage( $msgId : id  )
        not Destination($msgId;)
    then
        ResponseContent response = new ResponseContent( $sessionId, $msgId, null );
            response.setFault( new NoHandlerFault( $msgId, "CRITICAL : No Internal Routing Rule for this Message! " ) );
        insert( response );
end






