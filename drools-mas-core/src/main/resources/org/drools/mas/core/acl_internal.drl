/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
    Message content processing.
    Determines the actions necessary to handle a message
    The actions will be executed on a target session, as decided by the routing rules
*/

package org.drools.mas.core;

import org.drools.mas.ACLMessage;
import org.drools.mas.Act;
import org.drools.mas.body.content.*;
import org.drools.mas.body.acts.*;
import org.drools.mas.util.MessageContentHelper;
import org.drools.mas.util.MessageContentFactory;
import org.kie.api.command.BatchExecutionCommand;
import java.util.List;
import java.util.ArrayList;

import org.drools.mas.util.LoggerHelper;
import org.drools.mas.util.helper.SessionLocator;

import org.drools.mas.core.helpers.*;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.ExecutionResults;
import org.kie.api.runtime.rule.QueryResults
import org.drools.mas.core.SessionManager;
import org.kie.internal.command.CommandFactory;
import org.drools.core.command.runtime.BatchExecutionCommandImpl;

//rule "Response content inserted"
//    when
//        $r: ResponseContent()
//    then
//        LoggerHelper.debug("CONTENT = "+$r);
//end

rule "Invoke"
when
    $msg : ACLMessage( $msgId : id )
    $dst : Destination( $msgId , $sessionId ; )
    $cmd : MessageCommands( $msgId, $sessionId, $batch ; )
    SessionLocator( sessionId == $sessionId )
then
    LoggerHelper.debug( " ### INTERNAL: ["+$msgId+"] INVOKE - EXECUTING msg commands for "+ $msgId + " in " + $sessionId );
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL: \t["+$msgId+"] commands " + $cmd );
    }
    
    retract( $cmd );

    SessionManager sessionManager = SessionHelper.getInstance().getSessionManager( $sessionId );

    KieSession kSession = sessionManager.getKieSession();
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL RULES: ["+$msgId+"] Trying to execute in = " + kSession + " -  batch: " + $batch );
    }

    try {

        ExecutionResults result = kSession.execute( $batch );
        if ( LoggerHelper.isDebugEnabled() ) {
            LoggerHelper.debug( " ### INTERNAL RULES: ["+$msgId+"] Executing Synchronous Batch, waiting for results ... " + result );
        }
        Object retVal = result.getValue( "$out_" + $msgId );
        if ( LoggerHelper.isDebugEnabled() ) {
            LoggerHelper.debug( " ### INTERNAL RULES: ["+$msgId+"] Remote Execution return = " + retVal );
        }
        ResponseContent response = new ResponseContent( $sessionId, $msgId, retVal );
        insert( response );

    } catch ( Exception e ) {
        e.printStackTrace();
        if ( LoggerHelper.isDebugEnabled() ) {
            LoggerHelper.debug(" ### INTERNAL RULES: ["+$msgId+"] Remote Execution fails = " + e.getMessage() );
        }
        insert( new PerformativeFail( $msgId, e.getMessage() ) );
    }

end


rule "Invoke_OneShot"
salience 1
when
    $msg : ACLMessage( $msgId : id )
    $dst : Destination( $msgId , $sessionId ; )
    $cmd : OneShotMessageCommand( $msgId, $act ; )
    SessionLocator( sessionId == $sessionId )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL: EXECUTING msg command ONE for "+ $msgId + " in " + $sessionId );
        LoggerHelper.debug( " ### INTERNAL: \t commands " + $cmd );
    }
    retract( $cmd );
    
    SessionManager sessionManager = SessionHelper.getInstance().getSessionManager( $sessionId );
    KieSession kSession = sessionManager.getKieSession();
    kSession.execute( $act );
    kSession.execute( CommandFactory.newFireAllRules() );
end


// Process Performatives 


rule "Process_Inform"
when
    $msg : ACLMessage( $msgId : id, performative == Act.INFORM )
    Inform( $info : proposition ) from $msg.body
    $dst : Destination( $msgId, $sid ; )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR INFORM " + $msgId );
    }
    List list = new ArrayList(2);
            //list.add(CommandFactory.newInsert( $info.getData(), "$out_"+$msgId ));
            list.add( CommandFactory.newInsert( $info.getData() ) );
            list.add( CommandFactory.newFireAllRules() );
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl( list );
    insert( new MessageCommands( $msgId, $sid, batch ) );
end


rule "Process_Confirm"
when
    $msg : ACLMessage( $msgId : id, performative == Act.CONFIRM )
    Confirm( $info : proposition ) from $msg.body
    $dst : Destination( $msgId, $sid ; )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR CONFIRM " + $msgId );
    }
    List list = new ArrayList(2);
            //list.add(CommandFactory.newInsert( $info.getData(), "$out_"+$msgId ));
            list.add( CommandFactory.newInsert( $info.getData() ) );
            list.add( CommandFactory.newFireAllRules() );
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl( list );
    insert( new MessageCommands( $msgId, $sid, batch ) );
end

rule "Process_Disconfirm"
when
    $msg : ACLMessage( $msgId : id, performative == Act.DISCONFIRM )
    Disconfirm( $info : proposition ) from $msg.body
    $dst : Destination( $msgId, $sid ; )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR DISCONFIRM " + $msgId );
    }
    List list = new ArrayList(2);
    
    list.add( CommandFactory.newDeleteObject( $info.getData(), null ) );
    list.add( CommandFactory.newFireAllRules() );
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl( list );
    insert( new MessageCommands( $msgId, $sid, batch ) );
end




rule "Process_QueryIf"
when
    $msg : ACLMessage( $msgId : id, performative == Act.QUERY_IF )
    QueryIf( $info : proposition ) from $msg.body
    $dst : Destination( $msgId , $sessionId ; )
    SessionLocator( sessionId == $sessionId )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR QUERYIF " + $msgId );
    }
    List list = new ArrayList( 1 );
    list.add( CommandFactory.newQuery( "$out_" + $msgId, "queryIf", new Object[] { $info.getData() } ) );
    BatchExecutionCommand batch = CommandFactory.newBatchExecution( list );
    insert( new MessageCommands( $msgId, $sessionId, batch ) );
end


rule "Fix_QueryIf_Results"
salience 9999
no-loop
when
    $msg :  ACLMessage( $msgId : id, performative == Act.QUERY_IF )
    $cont : ResponseContent( $sessionId: sessionId,  messageId == $msgId, $data : data != null )
            QueryResults( size > 0 ) from $data
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug(" ### INTERNAL: FIXING QUERYIF RESULTS " + $msgId );
        LoggerHelper.debug(" ### INTERNAL: FIXING QUERYIF RESULTS " + $sessionId );
    }
    modify ( $cont ) {
        setData( ( (QueryResults) $data ).iterator().next().get( "$queryIf" ) );
    }
end






rule "Process_QueryRef"
when
    $msg : ACLMessage( $msgId : id, performative == Act.QUERY_REF )
    QueryRef( $query : query ) from $msg.body
    $dst : Destination( $msgId , $sessionId ; )
    SessionLocator( sessionId == $sessionId )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: ["+$msgId+"] GENERATING COMMANDS FOR QUERYREF. Name= '" + $query.getQueryName()+"', Args= '"+$query.getArgs()+"', outputId= '$out_"+$msgId+"'");
    }
    List list = new ArrayList(1);
    list.add( CommandFactory.newQuery( "$out_"+$msgId, $query.getQueryName(), $query.getArgs().toArray() ));
    BatchExecutionCommand batch = CommandFactory.newBatchExecution(list);
    insert( new MessageCommands( $msgId, $sessionId, batch ) );
end

rule "Fix_QueryRef_Results"
salience 9999
no-loop
when
    $msg : ACLMessage( $msgId : id, performative == Act.QUERY_REF )
    QueryRef( $query : query ) from $msg.body
    $cont : ResponseContent( $sessionId: sessionId, messageId == $msgId, $data : data != null )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug(" ### INTERNAL: ["+$msgId+"] FIXING RESULTS FOR QUERYREF " + $msgId);
        LoggerHelper.debug(" ### INTERNAL: ["+$msgId+"] FIXING RESULTS FOR QUERYREF " + $sessionId);
        LoggerHelper.debug(" ### INTERNAL: ["+$msgId+"] FIXING RESULTS FOR QUERYREF " + $data);
        LoggerHelper.debug(" ### INTERNAL: ["+$msgId+"] FIXING RESULTS FOR QUERYREF. Setting data as " + MessageContentHelper.getQueryReferences( $query, (QueryResults) $data ));
    }

    modify ( $cont ) {
        setData( MessageContentHelper.getQueryReferences( $query, (QueryResults) $data ) );
    }
end



rule "Process_Request"
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST )
    $req : Request( $act : action, $actName : action.actionName ) from $msg.body
    $dst : Destination( $msgId , $sessionId ; )
    SessionLocator(sessionId == $sessionId)
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR REQUEST " + $msgId);
    }
    List list = new ArrayList(3);
            list.add(CommandFactory.newInsert( $req.getAction() ));
            list.add(CommandFactory.newFireAllRules());
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl(list);
    insert( new MessageCommands( $msgId, $sessionId, batch ) );
end


rule "Fix_Request_Results"
salience 9999
no-loop
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST )
    $req : Request( $act : action, $actName : action.actionName ) from $msg.body
    $cont : ResponseContent( $sessionId: sessionId, messageId == $msgId, $data : data != null )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $msgId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $sessionId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $data );
    }

    modify ( $cont ) {
        setData( MessageContentHelper.getActionReferences( $act, (Map) $data ) );
    }
end

rule "Fix_Request_When_Results"
salience 9999
no-loop
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST_WHEN )
    $req : RequestWhen( $act : action, $actName : action.actionName ) from $msg.body
    $cont : ResponseContent( $sessionId: sessionId, messageId == $msgId, $data : data != null )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $msgId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $sessionId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $data );
    }

    modify ( $cont ) {
        setData( MessageContentHelper.getActionReferences( $act, (Map) $data ) );
    }
end

rule "Fix_Request_Whenever_Results"
salience 9999
no-loop
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST_WHENEVER )
    $req : RequestWhenever( $act : action, $actName : action.actionName ) from $msg.body
    $cont : ResponseContent( $sessionId: sessionId, messageId == $msgId, $data : data != null )
then
    if ( LoggerHelper.isDebugEnabled() ) {
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $msgId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $sessionId );
        LoggerHelper.debug( " ### INTERNAL: FIXING RESULTS FOR REQUEST " + $data );
    }

    modify ( $cont ) {
        setData( MessageContentHelper.getActionReferences( $act, (Map) $data ) );
    }
end


rule "Process_Request_When"
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST_WHEN )
    $req : RequestWhen( $act : action, $actName : action.actionName, $condition : condition.drl ) from $msg.body
    $dst : Destination( $msgId , $sessionId ; )
    SessionLocator( sessionId == $sessionId )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR REQUEST WHEN " + $msgId + " " + $condition);
    }
    ActionHolder holder = new ActionHolder( $msgId, $act, $condition, false );

    java.util.List list = new ArrayList( 2 );
            list.add( CommandFactory.newInsert( holder ) );
            list.add( CommandFactory.newFireAllRules() );
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl( list );
    insert( new OneShotMessageCommand( $msgId,  batch ) );
end


rule "Process_Request_Whenever"
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST_WHENEVER )
    $req : RequestWhenever( $act : action, $actName : action.actionName, $condition : condition.drl ) from $msg.body
    $dst : Destination( $msgId , $sessionId ; )
    SessionLocator(  sessionId == $sessionId )
then
    if (LoggerHelper.isDebugEnabled()) {
        LoggerHelper.debug(" ### INTERNAL: GENERATING COMMANDS FOR REQUEST WHENEVER " + $msgId + " " + $condition);
    }
    ActionHolder holder = new ActionHolder( $msgId, $act, $condition, true );

    java.util.List list = new ArrayList( 2 );
            list.add( CommandFactory.newInsert( holder ) );
            list.add( CommandFactory.newFireAllRules() );
    BatchExecutionCommandImpl batch = new BatchExecutionCommandImpl( list );
    insert( new OneShotMessageCommand( $msgId,  batch ) );
end


rule "Failed_Results"
salience 9999
no-loop
when
    $msg : ACLMessage( $msgId : id, performative == Act.REQUEST || == Act.REQUEST_WHEN || == Act.REQUEST_WHENEVER )
    $req : Request( $act : action, $actName : action.actionName ) from $msg.body
    $cnt : ResponseContent( messageId == $msgId, $data : data == null, $fault: fault )
    ExecutionFault($faultString: faultString) from $fault
    not    PerformativeFail( messageId == $msgId )
    // no exception thrown (so no failure is already in), but still the request did not return anything
then
   PerformativeFail fail = new PerformativeFail( $msgId,  $actName + " : No result is returned, because: "+$faultString );
   if (LoggerHelper.isDebugEnabled()) {
       LoggerHelper.debug(" ### INTERNAL: FAILURE -> "+ fail);
   }
   insert( fail );
end



rule "Clean Destinations"
when
    $dst : Destination( $id ; )
    not    ACLMessage( id == $id )
then
    retract( $dst );
end

