<?xml version='1.0' encoding='utf-8' ?>
<!--
  ~ Copyright 2011 JBoss Inc
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
    <title>Drools MAS - Architectural Overview </title>
    <section>
        <title>Architecture Overview</title>
    
        <para> Each individual agent is composed by a set of components that provides different set of functionalities.
            The following section describe these internal components and their main responsabilities.

        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/01-agent-high-level-arch.png" format="PNG"/>
            </imageobject>
        </mediaobject>
        <para>
            As you can see an individual agent is composed by three main components. The Core module, the Agent Communication Language module and 
            an Utility module. Domain specific artifacts will usually be attached to the agent structure to solve domain specific problems and 
            situations.
        </para>
       
        <para>
            The Core module is reposible to host the internal mechanisms that the agent will use to react and expose an endpoint that will enable us to 
            interact with it. How the agent internal structure will look like will be defined based on the configurations that we 
        </para>    
       
        <para>
            The ACL module provides the Agent Communication Language Structures. This language is composed by 22 performatives that will 
            enable the interactions between different agents. This ACL is based on FIPA-ACL, and right now there is a one to one mapping with the 
            FIPA-ACL standard. 
        </para>
       
        <para>
            The Util module contains a set of helper classes that will be used to speed up and simplify the development process. Message Factories, 
            Decoders/Encoders and general purpose tools will be provided by this module.
        </para>
       
        <para>
            Each of these three modules are represented by JAR packages in Java. That can be added as dependencies to your project using the following 
            Maven artifacts:
            <itemizedlist>
                <listitem>groupId - org.drools.mas</listitem>
                <listitem>artifactId - drools-mas-core</listitem>
            </itemizedlist>
            
            <itemizedlist>
                <listitem>groupId - org.drools.mas</listitem>
                <listitem>artifactId - drools-mas-acl</listitem>
            </itemizedlist>   
            <itemizedlist>
                <listitem>groupId - org.drools.mas</listitem>
                <listitem>artifactId - drools-mas-util</listitem>
            </itemizedlist>       

        </para>
        <para>
            We can instantiate each agent that we define as a single POJO like component interacting directly with the Agent's core, 
            or we can expose the agent's core via a Service Layer that will enable other applications and agents hosted remotely 
            to interact with our agent.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/04-agent-service-layer.png" format="PNG"/>
            </imageobject>
        </mediaobject>
        <para>
            This service layer will expose a couple of endpoints that will make our agent core available to remote clients. 
            The current version of the service layer is using CXF (JAX-WS 2.0) to expose the agent interfaces via Web Services.
            The web services mappings and configurations are provided by the drools-mas-agent-web-archetype archetype that allows us to 
            automatically build a parameterized new agent that exposes the described endpoints.
        </para>
        <para>
            Now every application or agent can consume the exposed WSDL and start interacting with the agents. 
            If the client application or agent share a specific business model the model dependency will need to be 
            included in both (the agent project and the client) projects. 
        </para>
        <para>
            If we choose to go with the Web Application archetype for exposing our agents, all the dependencies will be included
            inside the WebApplication Archive. This Web application can be deployed in any web container. Included in these dependencies,
            the CXF dependencies are also included. If you are planning to have more than one agent deployed in the same container a policy for
            shared dependencies can be created and the War files customized. As mentioned previously you can leverage the power of Maven 
            profiles to do that.
        </para>
        
        <para>
            The following section goes deep in each of these components and analyze the simple Emergency Agent example.
        </para>
    </section>
    
    

</chapter>
